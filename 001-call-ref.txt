Part 1: DW_OP_call_ref Correction

Section 2.5.1.5 (Control Flow Operations), page 36, lines 15-19

This is part 1 in a series of proposals related to support for debugging
on heterogeneous architectures. Although this proposal is not directly
related to heterogeneous architectures, it lays the groundwork for
subsequent proposals in this series.


BACKGROUND
----------

In Section 2.5.1.5 (Control Flow Operations), the DW_OP_call_ref
operator is described as being able to refer to DIEs in "an executable
or shared object file other than that containing the operator." It goes
on to say: "For references from one executable or shared object file to
another, the relocation must be performed by the consumer."

In Section 7.5.5 (Classes and Forms) on page 217, which says "This type
of reference (DW_FORM_ref_addr) is an offset from the beginning of the
.debug_info section of the target executable or shared object file, or,
for references within a supplementary object file, an offset from the
beginning of the local .debug_info section; it is relocatable in a
relocatable object file and frequently relocated in an executable or
shared object file. For references from one shared object or static
executable file to another, the relocation and identification of the
target object must be performed by the consumer."

In neither case does DWARF provide any means to identify a reference
from one linked object to another. For all practical purposes,
DW_OP_call_ref and DW_FORM_ref_addr can only be used to refer to
an offset within the same executable or shared object. Their purpose
is for references between compilation units, not between linked objects.


PROPOSED CHANGES
----------------

In Section 2.5.1.5 (Control Flow Operations), on page 36, in item 4
(DW_OP_call2, etc.), replace the sentences:

    "The operand is used as the offset of a debugging information entry
    in a .debug_info section which may be contained in an executable or
    shared object file other than that containing the operator. For
    references from one executable or shared object file to another, the
    relocation must be performed by the consumer."

with:

    "The operand is used as the offset of a debugging information entry
    in the .debug_info section of the current executable or
    shared object file."

In Section 7.5.5 (Classes and Forms), on page 217, in the second bullet item
under "reference" ("The second type of reference..."), remove the
sentence "For references from one shared object or static executable
file to another, the relocation and identification of the target object
must be performed by the consumer."
